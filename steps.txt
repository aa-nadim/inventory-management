________________For Env_____________________

____________________________For Linux

      python3 -m venv .venv
      source .venv/bin/activate
      deactivate
____________________________For Windows

      python -m venv .venv
      source .venv/Scripts/activate 
      deactivate
-------------------------------------------

_______________For Project________________

referance=====>https://docs.djangoproject.com/en/5.1/intro/tutorial01/

check version--->

        python3 -m django --version
        pip install django

        mkdir inventory
        django-admin startproject mysite inventory
        cd inventory

        
        python manage.py runserver

        python manage.py startapp app_name

pip freeze > requirements.txt

____________________________________________________
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'inventory-management-db-demo',
        'USER': 'aa_nadim',
        'PASSWORD': 'aa_nadim@123',
        'HOST': 'postgres',
        'PORT': '5432',
    }
}

--------------------
services:
  postgres:
    image: postgres:16.1-alpine
    container_name: postgres_db
    environment:
      POSTGRES_USER: aa_nadim
      POSTGRES_PASSWORD: aa_nadim@123
      POSTGRES_DB: inventory-management-db-demo
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - inventoryManagement_network

  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    networks:
      - inventoryManagement_network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    networks:
      - inventoryManagement_network

volumes:
  postgres_data:
  pgadmin_data:

networks:
  inventoryManagement_network:
    driver: bridge
____________________________________________________
# Use an official Python runtime as the base image
FROM python:3.11-slim

# Set the working directory in the container
WORKDIR /app

# Install system dependencies (needed for Django, PostgreSQL, etc.)
RUN apt-get update && apt-get install -y \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy the requirements.txt file into the container
COPY requirements.txt /app/

# Install the Python dependencies from requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of your project into the container
COPY . /app/

# Expose the port Django will run on (default is 8000)
EXPOSE 8000

# Command to run the Django app
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]


------------------------------------------------------------------

asgiref
Django
sqlparse
psycopg2-binary

____________________________________________________
docker-compose build
docker-compose up
docker-compose up -d

------------------------------------------

docker exec -it inventory-web-1 python manage.py makemigrations
docker exec -it inventory-web-1 python manage.py migrate
-----------------------------------------------------------

docker exec -it inventory-web-1 python manage.py startapp app_name

docker exec -it inventory-web-1 rm -rf app_name
------------------------------------

docker exec -it inventory-web-1 python manage.py createsuperuser

admin
admin@admin.com
admin123

------------------------------------------------------------------

# Use an official Python runtime as the base image
FROM python:3.11-slim

# Set the working directory in the container
WORKDIR /app

# Install system dependencies (needed for Django, PostgreSQL, etc.)
RUN apt-get update && apt-get install -y \
    libpq-dev \
    postgis \
    && rm -rf /var/lib/apt/lists/*

# Copy the requirements.txt file into the container
COPY requirements.txt /app/

# Install the Python dependencies from requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of your project into the container
COPY . /app/

# Expose the port Django will run on (default is 8000)
EXPOSE 8000

# Command to run the Django app
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
---------------------
services:
  postgres:
    image: postgis/postgis:latest
    container_name: postgres_db
    environment:
      POSTGRES_USER: aa_nadim
      POSTGRES_PASSWORD: aa_nadim@123
      POSTGRES_DB: inventory-management-db-demo
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - inventoryManagement_network

  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    networks:
      - inventoryManagement_network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    networks:
      - inventoryManagement_network

volumes:
  postgres_data:
  pgadmin_data:

networks:
  inventoryManagement_network:
    driver: bridge
-----------------------------------------

docker-compose down
docker-compose up --build


----------------------------------

docker exec -it inventory-web-1 python manage.py makemigrations
docker exec -it inventory-web-1 python manage.py migrate

------------------------------------------------------------------
docker volume ls
docker volume rm inventory_postgres_data

docker exec -it postgres_db psql -U aa_nadim -d inventory-management-db-demo

inventory-management-db-demo=# \dx

-------------------

docker exec -it inventory-web-1 python manage.py createsuperuser

admin
admin@admin.com
admin123

-----------------------
DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'inventory-management-db-demo',
        'USER': 'aa_nadim',
        'PASSWORD': 'aa_nadim@123',
        'HOST': 'postgres',
        'PORT': '5432',
    }
}
--------------
docker-compose down
docker-compose up --build -d

docker exec -it inventory-web-1 python manage.py makemigrations properties
docker exec -it inventory-web-1 python manage.py migrate


docker-compose exec web pip install django-leaflet



--------------------------------------------------------------------------for windows-------------------------------------

error

postgres_db  | PostgreSQL Database directory appears to contain a database; Skipping initialization
postgres_db  |
postgres_db  | 2024-11-29 15:15:48.981 UTC [1] FATAL:  database files are incompatible with server
postgres_db  | 2024-11-29 15:15:48.981 UTC [1] DETAIL:  The data directory was initialized by PostgreSQL version 16, which is not compatible with this version 17.2 (Debian 17.2-1.pgdg110+1).

-------

docker-compose down

docker volume rm inventory-management_postgres_data

docker volume ls


docker volume rm $(docker volume ls -q)

docker-compose up --build

------
docker exec -it inventory-management-web-1 python manage.py makemigrations properties
docker exec -it inventory-management-web-1 python manage.py migrate
-------------------

docker exec -it inventory-management-web-1 python manage.py createsuperuser

admin
admin@admin.com
admin123

-----------------------


------------------------------

amenities--->>
[
    "Free Wi-Fi",
    "Air Conditioning",
    "Swimming Pool",
    "Pet-Friendly",
    "Room Service",
    "Gym Access"
]
------------------------------

policy--->>

{
    "pet_policy": {
        "en": "Pets are not allowed.",
        "ar": "لا يُسمح بالحيوانات الأليفة."
    },
    "smoking_policy": {
        "en": "Smoking is prohibited indoors.",
        "ar": "التدخين ممنوع داخل المبنى."
    }
}
====================================


docker exec -it inventory-management-web-1 python manage.py shell


from properties.models import Location
Location.objects.create(id="US", title="United States", location_type="country", country_code="US")
Location.objects.create(id="CA", title="California", location_type="state", parent=Location.objects.get(id="US"), country_code="US")
Location.objects.create(id="LA", title="Los Angeles", location_type="city", parent=Location.objects.get(id="CA"), country_code="US")


-------------------------------------------------------------
________________________________________ERRORS________________________________
2024-11-30 12:43:57     connection = super().get_new_connection(conn_params)
2024-11-30 12:43:57                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2024-11-30 12:43:57   File "/usr/local/lib/python3.11/site-packages/django/utils/asyncio.py", line 26, in inner
2024-11-30 12:43:57     return func(*args, **kwargs)
2024-11-30 12:43:57            ^^^^^^^^^^^^^^^^^^^^^
2024-11-30 12:43:57   File "/usr/local/lib/python3.11/site-packages/django/db/backends/postgresql/base.py", line 332, in get_new_connection
2024-11-30 12:43:57     connection = self.Database.connect(**conn_params)
2024-11-30 12:43:57                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2024-11-30 12:43:57   File "/usr/local/lib/python3.11/site-packages/psycopg2/__init__.py", line 122, in connect
2024-11-30 12:43:57     conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
2024-11-30 12:43:57            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2024-11-30 12:43:57 django.db.utils.OperationalError: connection to server at "postgres" (172.18.0.2), port 5432 failed: Connection refused
2024-11-30 12:43:57     Is the server running on that host and accepting TCP/IP connections?


Verify PostgreSQL Connection===>

docker exec -it <web_container_id> bash

docker exec -it f61586a40be8 bash

psql -h postgres_db -U aa_nadim -d inventory-management-db-demo

docker-compose down -v
docker-compose up --build


____________--Exiting psql

\q
exit
------
docker exec -it inventory-management-web-1 python manage.py makemigrations properties
docker exec -it inventory-management-web-1 python manage.py migrate
-------------------

docker exec -it inventory-management-web-1 python manage.py createsuperuser

admin
admin@admin.com
admin123

-----------------------